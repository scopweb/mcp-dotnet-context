{
  "patterns": [
    {
      "id": "blazor-perf-shouldrender",
      "category": "performance",
      "framework": "blazor-server",
      "version": "10.0",
      "title": "ShouldRender Optimization",
      "description": "Override ShouldRender to control when a component re-renders. Return false to skip unnecessary renders and improve performance. Critical for high-frequency update scenarios.",
      "code": "@code {\n    [Parameter]\n    public int Value { get; set; }\n\n    private int previousValue;\n    private bool hasChanges;\n\n    protected override void OnParametersSet()\n    {\n        // Track if value actually changed\n        hasChanges = Value != previousValue;\n        previousValue = Value;\n\n        base.OnParametersSet();\n    }\n\n    protected override bool ShouldRender()\n    {\n        // Only render if there are actual changes\n        if (!hasChanges)\n        {\n            return false; // Skip render\n        }\n\n        hasChanges = false;\n        return true; // Allow render\n    }\n}",
      "tags": ["performance", "rendering", "optimization", "shouldrender", "blazor-server"],
      "usage_count": 0,
      "relevance_score": 0.93,
      "created_at": "2025-10-25T00:00:00Z",
      "updated_at": "2025-10-25T00:00:00Z"
    },
    {
      "id": "blazor-perf-virtualization",
      "category": "performance",
      "framework": "blazor-server",
      "version": "10.0",
      "title": "Virtualize Component for Large Lists",
      "description": "Use the Virtualize component for rendering large lists efficiently. Only renders items currently visible in the viewport, dramatically improving performance with thousands of items.",
      "code": "@using Microsoft.AspNetCore.Components.Web.Virtualization\n\n<Virtualize Items=\"@items\" Context=\"item\">\n    <div class=\"item\">\n        <h3>@item.Title</h3>\n        <p>@item.Description</p>\n    </div>\n</Virtualize>\n\n@* For async data loading *@\n<Virtualize ItemsProvider=\"@LoadItems\" Context=\"item\">\n    <ItemContent>\n        <div class=\"item\">@item.Name</div>\n    </ItemContent>\n    <Placeholder>\n        <div class=\"placeholder\">Loading...</div>\n    </Placeholder>\n</Virtualize>\n\n@code {\n    private List<MyItem> items = new();\n\n    protected override async Task OnInitializedAsync()\n    {\n        // Load data\n        items = await GetItemsAsync();\n    }\n\n    private async ValueTask<ItemsProviderResult<MyItem>> LoadItems(\n        ItemsProviderRequest request)\n    {\n        // Load only the requested range\n        var items = await GetItemsAsync(\n            request.StartIndex,\n            request.Count,\n            request.CancellationToken);\n\n        return new ItemsProviderResult<MyItem>(items, totalItemCount);\n    }\n}",
      "tags": ["performance", "virtualization", "large-lists", "optimization", "blazor-server"],
      "usage_count": 0,
      "relevance_score": 0.95,
      "created_at": "2025-10-25T00:00:00Z",
      "updated_at": "2025-10-25T00:00:00Z"
    },
    {
      "id": "blazor-perf-key-attribute",
      "category": "performance",
      "framework": "blazor-server",
      "version": "10.0",
      "title": "@key Directive for List Rendering",
      "description": "Use @key directive when rendering collections to help Blazor track elements efficiently. Prevents unnecessary DOM updates and improves performance when lists change.",
      "code": "@foreach (var item in items)\n{\n    <div @key=\"item.Id\">\n        <ItemComponent Item=\"@item\" />\n    </div>\n}\n\n@* Without @key, Blazor may recreate all components\n   With @key, Blazor preserves existing components *@\n\n@code {\n    private List<TodoItem> items = new();\n\n    private void AddItem()\n    {\n        items.Insert(0, new TodoItem { Id = Guid.NewGuid(), Title = \"New\" });\n        // With @key, only the new item component is created\n        // Existing components are preserved and reused\n    }\n\n    private void RemoveItem(Guid id)\n    {\n        items.RemoveAll(x => x.Id == id);\n        // With @key, only the removed component is destroyed\n    }\n}",
      "tags": ["performance", "rendering", "key-directive", "lists", "blazor-server"],
      "usage_count": 0,
      "relevance_score": 0.90,
      "created_at": "2025-10-25T00:00:00Z",
      "updated_at": "2025-10-25T00:00:00Z"
    },
    {
      "id": "blazor-perf-streaming-rendering",
      "category": "performance",
      "framework": "blazor-server",
      "version": "10.0",
      "title": "Streaming Rendering for Faster Initial Load",
      "description": ".NET 10 feature: Use streaming rendering to send initial HTML quickly while async operations complete. Improves perceived performance and Core Web Vitals.",
      "code": "@* Enable streaming rendering in the component *@\n@attribute [StreamRendering]\n\n<PageTitle>My Page</PageTitle>\n\n@if (data == null)\n{\n    <p>Loading...</p>\n}\nelse\n{\n    <div>\n        <h1>@data.Title</h1>\n        <p>@data.Content</p>\n    </div>\n}\n\n@code {\n    private MyData? data;\n\n    protected override async Task OnInitializedAsync()\n    {\n        // Initial render happens immediately with Loading state\n        // Then re-renders when data arrives\n        await Task.Delay(100); // Simulate fast cache check\n\n        if (CachedData != null)\n        {\n            data = CachedData;\n            StateHasChanged(); // First streaming update\n        }\n\n        // Load full data\n        data = await LoadDataAsync();\n        // Automatic re-render with full data\n    }\n}",
      "tags": ["performance", "streaming", "ssr", "initial-load", "blazor-server", "net10"],
      "usage_count": 0,
      "relevance_score": 0.91,
      "created_at": "2025-10-25T00:00:00Z",
      "updated_at": "2025-10-25T00:00:00Z"
    },
    {
      "id": "blazor-perf-preserve-whitespace",
      "category": "performance",
      "framework": "blazor-server",
      "version": "10.0",
      "title": "Reduce Render Size with PreserveWhitespace",
      "description": "Use @preservewhitespace false to reduce rendered HTML size by removing unnecessary whitespace. Can reduce payload by 10-15% in some cases.",
      "code": "@* At component level *@\n@preservewhitespace false\n\n<div>\n    <h1>Title</h1>\n    <p>Content without extra whitespace in output</p>\n</div>\n\n@* Or globally in _Imports.razor *@\n@* Add this to your _Imports.razor: *@\n@* @preservewhitespace false *@\n\n@code {\n    // No code changes needed\n    // This is a rendering optimization\n    // Reduces HTML payload size\n    // Improves bandwidth usage\n}",
      "tags": ["performance", "rendering", "optimization", "bandwidth", "blazor-server"],
      "usage_count": 0,
      "relevance_score": 0.85,
      "created_at": "2025-10-25T00:00:00Z",
      "updated_at": "2025-10-25T00:00:00Z"
    }
  ]
}
